require("dotenv").config();
const express = require("express");
const axios = require("axios");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors({
    origin: "*",  // Allows requests from anywhere
    methods: "GET,POST",
    allowedHeaders: "Content-Type,Authorization"
}));

const PORT = process.env.PORT || 3000;
const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
const AIRTABLE_PAT = process.env.AIRTABLE_PAT;

// ðŸ”¹ Fetch Client Feedback from Airtable
app.get("/client-feedback/:clientName", async (req, res) => {
    const { clientName } = req.params;
    const filterFormula = `filterByFormula={Client Name}='${clientName}'`;
    const url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/ClientFeedback?${filterFormula}`;

    try {
        const response = await axios.get(url, {
            headers: { Authorization: `Bearer ${AIRTABLE_PAT}` }
        });

        res.json(response.data.records);

    } catch (error) {
        console.error("Error fetching Client Feedback:", error);
        res.status(500).json({ error: "Failed to fetch Client Feedback data" });
    }
});

// ðŸ”¹ Fetch Brand Voice for a Specific Brand
app.get("/brand-voice/:brandName", async (req, res) => {
    const { brandName } = req.params;
    const filterFormula = `filterByFormula={Brand Name}='${brandName}'`;
    const url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/Brand%20Voices?${filterFormula}`;

    try {
        const response = await axios.get(url, {
            headers: { Authorization: `Bearer ${AIRTABLE_PAT}` }
        });

        if (response.data.records.length === 0) {
            return res.status(404).json({ error: "Brand not found" });
        }

        const brandData = response.data.records[0].fields;
        res.json({
            brand: brandData["Brand Name"],
            tone_style: brandData["Tone & Style"]
        });

    } catch (error) {
        console.error("Error fetching Brand Voice:", error);
        res.status(500).json({ error: "Failed to fetch Brand Voice data" });
    }
});

// ðŸ”¹ Start the API Server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${Pnano server.js

